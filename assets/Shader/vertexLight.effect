// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: vs:vert # builtin header
      frag: fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
  - name: transparent
    passes:
    - vert: vs:vert # builtin header
      frag: fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram vs %{
precision highp float;
#include <legacy/input-standard>
#include <builtin/uniforms/cc-global>
#include <legacy/local-batch>
#include <legacy/input-standard>
#include <legacy/fog-vs>
#include <legacy/shadow-map-vs>

in vec4 a_color;
#if HAS_SECOND_UV
  in vec2 a_texCoord1;
#endif

out vec3 v_position;
out vec3 v_normal;
out vec2 v_uv;
out vec2 v_uv1;
out vec4 v_color;

uniform Constant {
  vec4 mainColor;
};

vec4 vert () {
  StandardVertInput In;
  CCVertInput(In);

  mat4 matWorld, matWorldIT;
  CCGetWorldMatrixFull(matWorld, matWorldIT);

  vec4 pos = matWorld * In.position;

  v_position = pos.xyz;

  // phong
  vec3 L = normalize(cc_mainLitDir.xyz);
  vec3 N = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
  vec3 R = reflect(L,N);
  vec3 V = normalize(cc_cameraPos.xyz - v_position.xyz);
  float gloss = 0.2;
  vec4 phongLightColor = pow(max(0.0,dot(V,R)),gloss) * cc_mainLitColor;

  v_color = phongLightColor * mainColor;
  v_uv = a_texCoord;

  CC_TRANSFER_FOG(pos);
  CC_TRANSFER_SHADOW(pos);

  return cc_matProj * (cc_matView * matWorld) * In.position;
}

}%


CCProgram fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position;
  in vec4 v_color;

  uniform sampler2D mainTexture;

  vec4 frag () {
    vec4 col = v_color * texture(mainTexture, v_uv);
    CC_APPLY_FOG(col, v_position);
    return CCFragOutput(col);
  }
}%
