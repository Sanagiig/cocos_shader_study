// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
      - vert: general-vs:vert # builtin header
        frag: lit-fs:frag
        properties: &props
          mainColor:                        { value: [1.0, 1.0, 1.0, 1.0], linear: true, editor: { type: color } }
          mainTexture:                      { value: grey}
      - vert: general-vs:vert # builtin header
        frag: forward-fs:frag
        phase: forward-add
        properties: *props
        embeddedMacros: { CC_FORWARD_ADD: true }
        depthStencilState:
          depthFunc: equal
          depthTest: true
          depthWrite: false
        blendState:
          targets:
          - blend: true
            blendSrc: one
            blendDst: one
            blendSrcAlpha: zero
            blendDstAlpha: one
  - name: transparent
    passes:
      - vert: general-vs:vert
        frag: lit-fs:frag
        properties: *props
        depthStencilState:
          depthTest: true
          depthWrite: false
        blendState:
          targets:
          - blend: true
            blendSrc: src_alpha
            blendDst: one_minus_src_alpha
            blendDstAlpha: one_minus_src_alpha
}%

CCProgram lit-fs %{
  precision highp float;

  #include <legacy/fog-fs>
  #include <legacy/output>
  #include <builtin/uniforms/cc-global>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
  };

  vec4 frag () {
    vec3 LD = normalize(-cc_mainLitDir.xyz);
    vec3 N = v_normal.xyz;
    vec4 col = max(dot(LD,N),0.2) * cc_mainLitColor * mainColor * texture(mainTexture,v_uv) ;

    CC_APPLY_FOG(col, v_position);
    return CCFragOutput(col);
  }
}%

CCProgram forward-fs %{
  precision highp float;

  #include <legacy/fog-fs>
  #include <legacy/output>
  #include <builtin/uniforms/cc-global>
  #include <legacy/lighting>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;


  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
  };

  vec4 frag () {
    const int i = 0;

    vec3 N = v_normal;
    vec3 V = normalize(cc_cameraPos.xyz - v_position);
    vec3 SLU = cc_lightPos[0].xyz - v_position;
    vec3 SL = normalize(SLU);
    vec3 SH = normalize(SL + V);
    vec3 lightColor = cc_lightColor[i].rgb;
    
    float SNL = max(dot(N, SL), 0.0); // 法线与光向量点乘
    float SNH = max(dot(N, SH), 0.0); // 法线与半角向量点乘
    float distSqr = dot(SLU, SLU); // 点与光源的距离的平方
    float litRadius = cc_lightSizeRangeAngle[i].x;  // 光源大小
    float litRadiusSqr = litRadius * litRadius; // 光源半径的平方
    float illum = litRadiusSqr / max(litRadiusSqr, distSqr);  // 球光源半径与 点位到光源的比例系数
    float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);   // 1.0 / 光源范围 的比例系数。整个range范围内单位衰减比例
    attRadiusSqrInv *= attRadiusSqrInv;
    float att = GetDistAtt(distSqr, attRadiusSqrInv);

    // 根据聚光灯角度衰减
    if (cc_lightPos[i].w > 0.0) {
      float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);
      float cosOuter = cc_lightSizeRangeAngle[i].z;
      float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);
      float litAngleOffset = -cosOuter * litAngleScale;
      att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);
    }

    vec4 col =  cc_lightColor[i] * mainColor * texture(mainTexture,v_uv);
    vec4 finalColor = SNL * cc_lightColor[i].w * illum * att * col * vec4(lightColor,1.0);

    finalColor.a = col.a;
    CC_APPLY_FOG(finalColor);
    return CCFragOutput(finalColor);
  }
}%